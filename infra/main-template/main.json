{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "10675197638344957641"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "Specifies the environment of the deployment."
      },
      "allowedValues": [
        "dev",
        "tst",
        "prd"
      ]
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Specifies the prefix for all resources created in this deployment."
      },
      "maxLength": 10,
      "minLength": 2
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Specifies the tags that you want to apply to all resources."
      }
    },
    "partner": {
      "type": "string",
      "metadata": {
        "description": "Specifies the partner deployment."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/16",
      "metadata": {
        "description": "Specifies the address space of the vnet of the mainframe landing zone."
      }
    },
    "appServicesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for app services of the mainframe landing zone."
      }
    },
    "dataServicesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.2.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for data services of the mainframe landing zone."
      }
    },
    "dataIntegrationSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.3.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for integration services of the mainframe landing zone."
      }
    },
    "externalStorageSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.4.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for external storage services of the mainframe landing zone."
      }
    },
    "loggingServicesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.5.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for logging services of the mainframe landing zone."
      }
    },
    "hubVnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource Id of the vnet in the hub."
      }
    },
    "firewallPrivateIp": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the private IP address of the central firewall."
      }
    },
    "firewallPublicIp": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the public IP address of the central firewall. this is required for AKS"
      }
    },
    "dnsServerAdresses": {
      "type": "array",
      "defaultValue": [
        ""
      ],
      "metadata": {
        "description": "Specifies the private IP addresses of the dns servers."
      }
    },
    "administratorUsername": {
      "type": "string",
      "defaultValue": "SuperMainUser",
      "metadata": {
        "description": "Specifies the administrator username for the VMs and data services."
      }
    },
    "administratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the administrator password of the sql servers."
      }
    },
    "mainframeLandingZoneSubscriptionIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Specifies the subscription IDs of the other Data Landing Zones."
      }
    },
    "privateDnsZoneIdKeyVault": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Key Vault."
      }
    },
    "privateDnsZoneIdDataFactory": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Data Factory."
      }
    },
    "privateDnsZoneIdDataFactoryPortal": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Data Factory Portal."
      }
    },
    "privateDnsZoneIdBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Blob Storage."
      }
    },
    "privateDnsZoneIdSqlServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Azure Sql Server."
      }
    },
    "aksuseraccessprincipalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "aksadminaccessprincipalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "aksIdentityName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "clusterName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    }
  },
  "variables": {
    "name": "[toLower(format('{0}-{1}', parameters('prefix'), parameters('environment')))]",
    "guidforgenericaks": "[if(equals(parameters('partner'), 'genericaks'), 'PID-6D3E4B5C-C67C-4225-A2ED-17F8F481C8D4', '')]",
    "guidforraincode": "[if(equals(parameters('partner'), 'raincode'), 'PID-965A5A3E-A4EC-4B79-A6B5-E94162B2AC9A', '')]",
    "guidforstromasys": "[if(equals(parameters('partner'), 'stromasys'), 'PID-4C25D08B-B822-488F-BC77-3CC7370C10A8', '')]",
    "guidfortmaxsoft": "[if(equals(parameters('partner'), 'tmaxsoft'), 'PID-46D81167-7F9B-4F38-BEC2-C9EDF4E2485E', '')]",
    "guidforopentext": "[if(equals(parameters('partner'), 'opentext'), 'PID-F037B757-CD90-4C3C-AFC3-8B07D05523C0', '')]",
    "guidforluminex": "[if(equals(parameters('partner'), 'luminex'), 'PID-F8F4E0D7-ADF9-4141-81DD-5911F4093DF7', '')]",
    "Sysguid": "[if(not(equals(variables('guidforluminex'), '')), variables('guidforluminex'), if(not(equals(variables('guidforgenericaks'), '')), variables('guidforgenericaks'), if(not(equals(variables('guidforopentext'), '')), variables('guidforopentext'), if(not(equals(variables('guidfortmaxsoft'), '')), variables('guidfortmaxsoft'), if(not(equals(variables('guidforraincode'), '')), variables('guidforraincode'), if(not(equals(variables('guidforstromasys'), '')), variables('guidforstromasys'), 'PID-4241702A-BF95-4B5D-82E7-364BF62FE998'))))))]",
    "tagsDefault": {
      "Owner": "Azure Mainframe Landing Zone",
      "Project": "Azure Mainframe Landing Zone",
      "Environment": "[parameters('environment')]",
      "Toolkit": "bicep",
      "Name": "[variables('name')]",
      "Sysguid": "[variables('Sysguid')]"
    },
    "tagsJoined": "[union(variables('tagsDefault'), parameters('tags'))]",
    "sqlAdministratorUsername": "[parameters('administratorUsername')]",
    "sqlServer001Name": "dsvr",
    "sqlserverAdminGroupName": "",
    "sqlserverAdminGroupObjectID": "",
    "IsForContainerizedWorkoad": "[if(equals(parameters('partner'), 'genericaks'), true(), false())]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-appservices', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-logging', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-dataservices', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-externalstorage', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-shared-integration', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-networkServices', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "firewallPrivateIp": {
            "value": "[parameters('firewallPrivateIp')]"
          },
          "firewallPublicIp": {
            "value": "[parameters('firewallPublicIp')]"
          },
          "dnsServerAdresses": {
            "value": "[parameters('dnsServerAdresses')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "hubVnetId": {
            "value": "[parameters('hubVnetId')]"
          },
          "appServicesSubnetAddressPrefix": {
            "value": "[parameters('appServicesSubnetAddressPrefix')]"
          },
          "dataServicesSubnetAddressPrefix": {
            "value": "[parameters('dataServicesSubnetAddressPrefix')]"
          },
          "dataIntegrationSubnetAddressPrefix": {
            "value": "[parameters('dataIntegrationSubnetAddressPrefix')]"
          },
          "externalStorageSubnetAddressPrefix": {
            "value": "[parameters('externalStorageSubnetAddressPrefix')]"
          },
          "loggingServicesSubnetAddressPrefix": {
            "value": "[parameters('loggingServicesSubnetAddressPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "4990874370720792829"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "firewallPrivateIp": {
              "type": "string",
              "defaultValue": ""
            },
            "dnsServerAdresses": {
              "type": "array",
              "defaultValue": [
                ""
              ]
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.0.0/16"
            },
            "appServicesSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.0.0/24"
            },
            "dataServicesSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.2.0/24"
            },
            "dataIntegrationSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.3.0/24"
            },
            "externalStorageSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.4.0/24"
            },
            "loggingServicesSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.5.0/24"
            },
            "firewallPublicIp": {
              "type": "string",
              "defaultValue": ""
            },
            "hubVnetId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "appServicesSubnetName": "appServicesSubnet",
            "dataServicesSubnetName": "dataServicesSubnet",
            "dataIntegrationSubnetName": "dataIntegrationSubnet",
            "externalStorageSubnetName": "externalStorageSubnet",
            "loggingServicesSubnetName": "loggingServicesSubnet",
            "hubVnetSubscriptionId": "[if(greaterOrEquals(length(split(parameters('hubVnetId'), '/')), 9), split(parameters('hubVnetId'), '/')[2], subscription().subscriptionId)]",
            "hubVnetResourceGroupName": "[if(greaterOrEquals(length(split(parameters('hubVnetId'), '/')), 9), split(parameters('hubVnetId'), '/')[4], resourceGroup().name)]",
            "hubVnetName": "[if(greaterOrEquals(length(split(parameters('hubVnetId'), '/')), 9), last(split(parameters('hubVnetId'), '/')), 'incorrectSegmentLength')]",
            "egressAddressPrefix": "[format('{0}/32', parameters('firewallPublicIp'))]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('firewallPublicIp'), '')]",
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-routetable', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "to-firewall-default",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('firewallPrivateIp')]"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[not(equals(parameters('firewallPublicIp'), ''))]",
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-routetable', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "to-firewall-default",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('firewallPrivateIp')]"
                    }
                  },
                  {
                    "name": "from-firewall-to-internet",
                    "properties": {
                      "addressPrefix": "[variables('egressAddressPrefix')]",
                      "nextHopType": "Internet"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-nsg', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}-vnet', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "enableDdosProtection": false,
                "subnets": [
                  {
                    "name": "[variables('appServicesSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('appServicesSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[if(equals(parameters('firewallPublicIp'), ''), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('dataServicesSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('dataServicesSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[if(equals(parameters('firewallPublicIp'), ''), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('dataIntegrationSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('dataIntegrationSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[if(equals(parameters('firewallPublicIp'), ''), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('externalStorageSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('externalStorageSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[if(equals(parameters('firewallPublicIp'), ''), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('loggingServicesSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('loggingServicesSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[if(equals(parameters('firewallPublicIp'), ''), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]",
                "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]",
                "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('hubVnetId')))]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-vnet', parameters('prefix')), variables('hubVnetName'))]",
              "properties": {
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "allowVirtualNetworkAccess": true,
                "peeringState": "Connected",
                "remoteVirtualNetwork": {
                  "id": "[parameters('hubVnetId')]"
                },
                "useRemoteGateways": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('hubVnetId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('hubDataLandingZoneVnetPeering-{0}', parameters('prefix'))]",
              "subscriptionId": "[variables('hubVnetSubscriptionId')]",
              "resourceGroup": "[variables('hubVnetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "mainframeLandingZoneVnetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
                  },
                  "hubVnetId": {
                    "value": "[parameters('hubVnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "2544321179252172512"
                    }
                  },
                  "parameters": {
                    "hubVnetId": {
                      "type": "string"
                    },
                    "mainframeLandingZoneVnetId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "hubVnetName": "[if(greaterOrEquals(length(split(parameters('hubVnetId'), '/')), 9), last(split(parameters('hubVnetId'), '/')), 'incorrectSegmentLength')]",
                    "mainframeLandingZoneVnetName": "[if(greaterOrEquals(length(split(parameters('mainframeLandingZoneVnetId'), '/')), 9), last(split(parameters('mainframeLandingZoneVnetId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('hubVnetName'), variables('mainframeLandingZoneVnetName'))]",
                      "properties": {
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": true,
                        "allowVirtualNetworkAccess": true,
                        "peeringState": "Connected",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('mainframeLandingZoneVnetId')]"
                        },
                        "useRemoteGateways": false
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[format('{0}-vnet', parameters('prefix'))]"
            },
            "nsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
            },
            "routeTableId": {
              "type": "string",
              "value": "[if(equals(parameters('firewallPublicIp'), ''), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))), resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix'))))]"
            },
            "routeTableName": {
              "type": "string",
              "value": "[if(equals(parameters('firewallPublicIp'), ''), format('{0}-routetable', parameters('prefix')), format('{0}-routetable', parameters('prefix')))]"
            },
            "appServicesSubnetName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix'))), '2020-06-01').subnets[0].name]"
            },
            "appServicesSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix'))), '2020-06-01').subnets[0].id]"
            },
            "dataServicesSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix'))), '2020-06-01').subnets[1].id]"
            },
            "dataIntegrationSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix'))), '2020-06-01').subnets[2].id]"
            },
            "externalStorageSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix'))), '2020-06-01').subnets[3].id]"
            },
            "loggingServicesSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix'))), '2020-06-01').subnets[4].id]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]"
      ]
    },
    {
      "condition": "[equals(parameters('partner'), 'raincode')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-appservicesraincode', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "adminUsername": {
            "value": "[parameters('administratorUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.appServicesSubnetName.value]"
          },
          "vnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.vnetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "2335010418826905678"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Admin username"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Admin password"
              }
            },
            "vmNamePrefix": {
              "type": "string",
              "defaultValue": "[format('{0}vm', parameters('prefix'))]",
              "metadata": {
                "description": "Prefix to use for VM names"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v3",
              "metadata": {
                "description": "Size of the virtual machines"
              }
            },
            "loadBalancerName": {
              "type": "string",
              "defaultValue": "[format('{0}-ilb', parameters('prefix'))]",
              "metadata": {
                "description": "Loab Balancer name"
              }
            },
            "networkInterfaceName": {
              "type": "string",
              "defaultValue": "[format('{0}-nic', parameters('prefix'))]",
              "metadata": {
                "description": "Network Interface name"
              }
            },
            "availabilitySetName": {
              "type": "string",
              "defaultValue": "[format('{0}-AvSet', parameters('prefix'))]",
              "metadata": {
                "description": "Availability Set name"
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Storage Type for Vhds"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "VNet Name"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet Name"
              }
            }
          },
          "variables": {
            "storageAccountName": "[uniqueString(resourceGroup().id)]",
            "numberOfInstances": 2
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2"
            },
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2021-11-01",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Aligned"
              },
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              }
            },
            {
              "copy": {
                "name": "networkInterface",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                      },
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-05-01",
              "name": "[parameters('loadBalancerName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "LoadBalancerFrontend"
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "BackendPool1"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), 'lbprobe')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 80,
                      "backendPort": 80,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "lbrule"
                  }
                ],
                "probes": [
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 80,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "lbprobe"
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "vm",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "plan": {
                "name": "raincode_metal_linux",
                "publisher": "raincode",
                "product": "raincode_metal_linux"
              },
              "properties": {
                "availabilitySet": {
                  "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[parameters('storageAccountType')]"
                    }
                  },
                  "imageReference": {
                    "publisher": "raincode",
                    "offer": "raincode_metal_linux",
                    "sku": "raincode_metal_linux",
                    "version": "4.2.197"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "condition": "[equals(parameters('partner'), 'stromasys')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-appservicesstromasys', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "adminUsername": {
            "value": "[parameters('administratorUsername')]"
          },
          "adminPasswordOrKey": {
            "value": "[parameters('administratorPassword')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.appServicesSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "13466553427586028997"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of all resources"
              }
            },
            "prefix": {
              "type": "string",
              "defaultValue": "test",
              "metadata": {
                "description": "Prefix for all names"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {
                "tag1": "tag-value-1"
              },
              "metadata": {
                "description": "Tags for all resources"
              }
            },
            "vmSizeEmulatorHost": {
              "type": "string",
              "defaultValue": "Standard_F8s_v2",
              "metadata": {
                "description": "Size of the Emulator Host VMs"
              }
            },
            "vmSizeLicenseServer": {
              "type": "string",
              "defaultValue": "Standard_B2s",
              "metadata": {
                "description": "Size of the License Server VM"
              }
            },
            "vmSizeManager": {
              "type": "string",
              "defaultValue": "Standard_B2s",
              "metadata": {
                "description": "Size of the Manager VM"
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Storage Type for Vhds"
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Id of the subnet"
              }
            },
            "adminUsername": {
              "type": "string",
              "defaultValue": "sshuser",
              "metadata": {
                "description": "Admin Username for VMs"
              }
            },
            "authenticationType": {
              "type": "string",
              "defaultValue": "password",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ],
              "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended"
              }
            },
            "adminPasswordOrKey": {
              "type": "securestring",
              "metadata": {
                "description": "SSH key or password for the VMs. SSH key is recommended"
              }
            },
            "emulatorGuestAppPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Application port on the emulator guest to expose on the internal network"
              }
            }
          },
          "variables": {
            "charonImageReference": {
              "publisher": "stromasys",
              "offer": "charon-ssp-ve",
              "sku": "charon-ssp-with-ve-license",
              "version": "latest"
            },
            "charonPlan": {
              "name": "charon-ssp-with-ve-license",
              "publisher": "stromasys",
              "product": "charon-ssp-ve"
            },
            "numberOfResourcesHA": 2,
            "availabilitySetName": "[format('{0}-availability-set', parameters('prefix'))]",
            "loadBalancerName": "[format('{0}-load-balancer', parameters('prefix'))]",
            "networkSecurityGroupName": "[format('{0}-security-group', parameters('prefix'))]",
            "networkInterfaceNamePrefix": "[format('{0}-nic', parameters('prefix'))]",
            "vmNamePrefix": "[format('{0}-vm', parameters('prefix'))]",
            "storageAccountName": "[uniqueString(resourceGroup().id)]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                    "keyData": "[parameters('adminPasswordOrKey')]"
                  }
                ]
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2"
            },
            {
              "copy": {
                "name": "availabilitySet",
                "count": "[length(range(0, 3))]"
              },
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}-{1}', variables('availabilitySetName'), range(0, 3)[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Aligned"
              },
              "properties": {
                "platformUpdateDomainCount": "[variables('numberOfResourcesHA')]",
                "platformFaultDomainCount": "[variables('numberOfResourcesHA')]"
              }
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-emulator-host-and-guest', variables('loadBalancerName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "LoadBalancerFrontend"
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "BackendPoolHostSSH"
                  },
                  {
                    "name": "BackendPoolGuestApp"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'BackendPoolHostSSH')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'LBProbeHostSSH')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 22,
                      "backendPort": 22,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "LBRuleHostSSH"
                  },
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'BackendPoolGuestApp')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'LBProbeGuestApp')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": "[parameters('emulatorGuestAppPort')]",
                      "backendPort": "[parameters('emulatorGuestAppPort')]",
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "LBRuleGuestApp"
                  }
                ],
                "probes": [
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 22,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "LBProbeHostSSH"
                  },
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": "[parameters('emulatorGuestAppPort')]",
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "LBProbeGuestApp"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-license-server', variables('loadBalancerName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "LoadBalancerFrontend"
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "BackendPoolSSH"
                  },
                  {
                    "name": "BackendPoolLicense"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', format('{0}-license-server', variables('loadBalancerName')), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-license-server', variables('loadBalancerName')), 'BackendPoolSSH')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', format('{0}-license-server', variables('loadBalancerName')), 'LBProbeSSH')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 22,
                      "backendPort": 22,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "LBRuleSSH"
                  },
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', format('{0}-license-server', variables('loadBalancerName')), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-license-server', variables('loadBalancerName')), 'BackendPoolLicense')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', format('{0}-license-server', variables('loadBalancerName')), 'LBProbeLicense')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 8083,
                      "backendPort": 8083,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "LBRuleLicense"
                  }
                ],
                "probes": [
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 22,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "LBProbeSSH"
                  },
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 8083,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "LBProbeLicense"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-manager', variables('loadBalancerName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "LoadBalancerFrontend"
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "BackendPoolSSH"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', format('{0}-manager', variables('loadBalancerName')), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-manager', variables('loadBalancerName')), 'BackendPoolSSH')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', format('{0}-manager', variables('loadBalancerName')), 'LBProbeSSH')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 22,
                      "backendPort": 22,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "LBRuleSSH"
                  }
                ],
                "probes": [
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 22,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "LBProbeSSH"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-ssh', variables('networkSecurityGroupName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "SSH",
                    "properties": {
                      "priority": 1000,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "22"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-emulator-guest', variables('networkSecurityGroupName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "HTTP",
                    "properties": {
                      "priority": 1000,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "[format('{0}', parameters('emulatorGuestAppPort'))]"
                    }
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "networkInterfaceEmulatorHost",
                "count": "[length(range(0, variables('numberOfResourcesHA')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-emulator-host-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'BackendPoolHostSSH')]"
                        }
                      ]
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ssh', variables('networkSecurityGroupName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', format('{0}-emulator-host-and-guest', variables('loadBalancerName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ssh', variables('networkSecurityGroupName')))]"
              ]
            },
            {
              "copy": {
                "name": "networkInterfaceEmulatorGuest",
                "count": "[length(range(0, variables('numberOfResourcesHA')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-emulator-guest-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-emulator-host-and-guest', variables('loadBalancerName')), 'BackendPoolGuestApp')]"
                        }
                      ]
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-emulator-guest', variables('networkSecurityGroupName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', format('{0}-emulator-host-and-guest', variables('loadBalancerName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-emulator-guest', variables('networkSecurityGroupName')))]"
              ]
            },
            {
              "copy": {
                "name": "networkInterfaceLicenseServer",
                "count": "[length(range(0, variables('numberOfResourcesHA')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-license-server-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-license-server', variables('loadBalancerName')), 'BackendPoolSSH')]"
                        },
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-license-server', variables('loadBalancerName')), 'BackendPoolLicense')]"
                        }
                      ]
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ssh', variables('networkSecurityGroupName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', format('{0}-license-server', variables('loadBalancerName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ssh', variables('networkSecurityGroupName')))]"
              ]
            },
            {
              "copy": {
                "name": "networkInterfaceManager",
                "count": "[length(range(0, variables('numberOfResourcesHA')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-manager-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-manager', variables('loadBalancerName')), 'BackendPoolSSH')]"
                        }
                      ]
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ssh', variables('networkSecurityGroupName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', format('{0}-manager', variables('loadBalancerName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ssh', variables('networkSecurityGroupName')))]"
              ]
            },
            {
              "copy": {
                "name": "vmEmulator",
                "count": "[length(range(0, variables('numberOfResourcesHA')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}-host-{1}', variables('vmNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "plan": "[variables('charonPlan')]",
              "properties": {
                "availabilitySet": {
                  "id": "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', variables('availabilitySetName'), range(0, 3)[0]))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSizeEmulatorHost')]"
                },
                "osProfile": {
                  "computerName": "[format('{0}-host-{1}', variables('vmNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPasswordOrKey')]",
                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                },
                "securityProfile": null,
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[parameters('storageAccountType')]"
                    }
                  },
                  "imageReference": "[variables('charonImageReference')]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-emulator-host-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]",
                      "properties": {
                        "primary": true
                      }
                    },
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-emulator-guest-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]",
                      "properties": {
                        "primary": false
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', variables('availabilitySetName'), range(0, 3)[0]))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-emulator-guest-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-emulator-host-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "vmLicenseServer",
                "count": "[length(range(0, variables('numberOfResourcesHA')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}-license-server-{1}', variables('vmNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "plan": "[variables('charonPlan')]",
              "properties": {
                "availabilitySet": {
                  "id": "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', variables('availabilitySetName'), range(0, 3)[1]))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSizeLicenseServer')]"
                },
                "osProfile": {
                  "computerName": "[format('{0}-license-server-{1}', variables('vmNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPasswordOrKey')]",
                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                },
                "securityProfile": null,
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[parameters('storageAccountType')]"
                    }
                  },
                  "imageReference": "[variables('charonImageReference')]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-license-server-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', variables('availabilitySetName'), range(0, 3)[1]))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-license-server-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "vmManager",
                "count": "[length(range(0, variables('numberOfResourcesHA')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}-manager-{1}', variables('vmNamePrefix'), range(0, variables('numberOfResourcesHA'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "plan": "[variables('charonPlan')]",
              "properties": {
                "availabilitySet": {
                  "id": "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', variables('availabilitySetName'), range(0, 3)[2]))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSizeManager')]"
                },
                "osProfile": {
                  "computerName": "[format('{0}-manager', variables('vmNamePrefix'))]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPasswordOrKey')]",
                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                },
                "securityProfile": null,
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[parameters('storageAccountType')]"
                    }
                  },
                  "imageReference": "[variables('charonImageReference')]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-manager-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', variables('availabilitySetName'), range(0, 3)[2]))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-manager-{1}', variables('networkInterfaceNamePrefix'), range(0, variables('numberOfResourcesHA'))[range(0, variables('numberOfResourcesHA'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "condition": "[equals(parameters('partner'), 'tmaxsoft')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-appServicesopenframe', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "adminUsername": {
            "value": "[parameters('administratorUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.appServicesSubnetName.value]"
          },
          "vnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.vnetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "14841167400232677594"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Admin username"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Admin password"
              }
            },
            "vmNamePrefix": {
              "type": "string",
              "defaultValue": "[format('{0}vm', parameters('prefix'))]",
              "metadata": {
                "description": "Prefix to use for VM names"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v3",
              "metadata": {
                "description": "Size of the virtual machines"
              }
            },
            "loadBalancerName": {
              "type": "string",
              "defaultValue": "[format('{0}-ilb', parameters('prefix'))]",
              "metadata": {
                "description": "Loab Balancer name"
              }
            },
            "networkInterfaceName": {
              "type": "string",
              "defaultValue": "[format('{0}-nic', parameters('prefix'))]",
              "metadata": {
                "description": "Network Interface name"
              }
            },
            "availabilitySetName": {
              "type": "string",
              "defaultValue": "[format('{0}-AvSet', parameters('prefix'))]",
              "metadata": {
                "description": "Availability Set name"
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Storage Type for Vhds"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "VNet Name"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet Name"
              }
            }
          },
          "variables": {
            "storageAccountName": "[uniqueString(resourceGroup().id)]",
            "numberOfInstances": 2
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2"
            },
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2021-11-01",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Aligned"
              },
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              }
            },
            {
              "copy": {
                "name": "networkInterface",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                      },
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-05-01",
              "name": "[parameters('loadBalancerName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "LoadBalancerFrontend"
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "BackendPool1"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), 'lbprobe')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 80,
                      "backendPort": 80,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "lbrule"
                  }
                ],
                "probes": [
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 80,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "lbprobe"
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "vm",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "plan": {
                "name": "ofvm001",
                "publisher": "tmaxsoft1608612658335",
                "product": "openframvm"
              },
              "properties": {
                "availabilitySet": {
                  "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[parameters('storageAccountType')]"
                    }
                  },
                  "imageReference": {
                    "publisher": "tmaxsoft1608612658335",
                    "offer": "openframvm",
                    "sku": "ofvm001",
                    "version": "0.0.2"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "condition": "[equals(parameters('partner'), 'opentext')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-appServicesopentext', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "adminUsername": {
            "value": "[parameters('administratorUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.appServicesSubnetName.value]"
          },
          "vnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.vnetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "13362411965131019160"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Admin username"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Admin password"
              }
            },
            "vmNamePrefix": {
              "type": "string",
              "defaultValue": "[format('{0}vm', parameters('prefix'))]",
              "metadata": {
                "description": "Prefix to use for VM names"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v3",
              "metadata": {
                "description": "Size of the virtual machines"
              }
            },
            "loadBalancerName": {
              "type": "string",
              "defaultValue": "[format('{0}-ilb', parameters('prefix'))]",
              "metadata": {
                "description": "Loab Balancer name"
              }
            },
            "networkInterfaceName": {
              "type": "string",
              "defaultValue": "[format('{0}-nic', parameters('prefix'))]",
              "metadata": {
                "description": "Network Interface name"
              }
            },
            "availabilitySetName": {
              "type": "string",
              "defaultValue": "[format('{0}-AvSet', parameters('prefix'))]",
              "metadata": {
                "description": "Availability Set name"
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Storage Type for Vhds"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "VNet Name"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet Name"
              }
            }
          },
          "variables": {
            "storageAccountName": "[uniqueString(resourceGroup().id)]",
            "numberOfInstances": 2
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2"
            },
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2021-11-01",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Aligned"
              },
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              }
            },
            {
              "copy": {
                "name": "networkInterface",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                      },
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-05-01",
              "name": "[parameters('loadBalancerName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "LoadBalancerFrontend"
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "BackendPool1"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), 'lbprobe')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 80,
                      "backendPort": 80,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "lbrule"
                  }
                ],
                "probes": [
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 80,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "lbprobe"
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "vm",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "plan": {
                "name": "es-vm",
                "publisher": "micro-focus",
                "product": "es-vm"
              },
              "properties": {
                "availabilitySet": {
                  "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[parameters('storageAccountType')]"
                    }
                  },
                  "imageReference": {
                    "publisher": "micro-focus",
                    "offer": "es-vm",
                    "sku": "es-vm",
                    "version": "8.0.5"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "condition": "[equals(parameters('partner'), 'generic')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-appservicesgeneric', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "adminUsername": {
            "value": "[parameters('administratorUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.appServicesSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3451825663687749599"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Admin username"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Admin password"
              }
            },
            "vmNamePrefix": {
              "type": "string",
              "defaultValue": "[format('{0}vm', parameters('prefix'))]",
              "metadata": {
                "description": "Prefix to use for VM names"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v3",
              "metadata": {
                "description": "Size of the virtual machines"
              }
            },
            "loadBalancerName": {
              "type": "string",
              "defaultValue": "[format('{0}-ilb', parameters('prefix'))]",
              "metadata": {
                "description": "Loab Balancer name"
              }
            },
            "networkInterfaceName": {
              "type": "string",
              "defaultValue": "[format('{0}-nic', parameters('prefix'))]",
              "metadata": {
                "description": "Network Interface name"
              }
            },
            "availabilitySetName": {
              "type": "string",
              "defaultValue": "[format('{0}-AvSet', parameters('prefix'))]",
              "metadata": {
                "description": "Availability Set name"
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Storage Type for Vhds"
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Id of the subnet"
              }
            }
          },
          "variables": {
            "storageAccountName": "[uniqueString(resourceGroup().id)]",
            "numberOfInstances": 2
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2"
            },
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2021-11-01",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Aligned"
              },
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              }
            },
            {
              "copy": {
                "name": "networkInterface",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-05-01",
              "name": "[parameters('loadBalancerName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "LoadBalancerFrontend"
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "BackendPool1"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), 'LoadBalancerFrontend')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), 'BackendPool1')]"
                      },
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), 'lbprobe')]"
                      },
                      "protocol": "Tcp",
                      "frontendPort": 80,
                      "backendPort": 80,
                      "idleTimeoutInMinutes": 15
                    },
                    "name": "lbrule"
                  }
                ],
                "probes": [
                  {
                    "properties": {
                      "protocol": "Tcp",
                      "port": 80,
                      "intervalInSeconds": 15,
                      "numberOfProbes": 2
                    },
                    "name": "lbprobe"
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "vm",
                "count": "[length(range(0, variables('numberOfInstances')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "availabilitySet": {
                  "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[format('{0}{1}', parameters('vmNamePrefix'), range(0, variables('numberOfInstances'))[copyIndex()])]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2019-Datacenter",
                    "version": "latest"
                  },
                  "osDisk": {
                    "createOption": "FromImage"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('networkInterfaceName'), range(0, variables('numberOfInstances'))[range(0, variables('numberOfInstances'))[copyIndex()]]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-loggingServices', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-logging', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "Sysguid": {
            "value": "[variables('Sysguid')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.loggingServicesSubnetId.value]"
          },
          "privateDnsZoneIdKeyVault": {
            "value": "[parameters('privateDnsZoneIdKeyVault')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "15820129827859441978"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "privateDnsZoneIdKeyVault": {
              "type": "string",
              "defaultValue": ""
            },
            "Sysguid": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "keyVault001Name": "[format('{0}-vault003', parameters('prefix'))]",
            "logAnalytics001Name": "[format('{0}-la001', parameters('prefix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-keyVault001', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "keyvaultName": {
                    "value": "[variables('keyVault001Name')]"
                  },
                  "privateDnsZoneIdKeyVault": {
                    "value": "[parameters('privateDnsZoneIdKeyVault')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "5916970951876729132"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "keyvaultName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdKeyVault": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "keyVaultPrivateEndpointName": "[format('{0}-private-endpoint', parameters('keyvaultName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('keyvaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "accessPolicies": [],
                        "createMode": "default",
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "softDeleteRetentionInDays": 7,
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('keyVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('keyVaultPrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "vault"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdKeyVault')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('keyVaultPrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdKeyVault')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyvaultId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyvaultName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-logAnalytics001', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnanalyticsName": {
                    "value": "[variables('logAnalytics001Name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "4301416386548084815"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "logAnanalyticsName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('logAnanalyticsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "features": {},
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled",
                        "retentionInDays": 120,
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnanalyticsName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-lA001Secret', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-keyVault001', parameters('Sysguid'))), '2022-09-01').outputs.keyvaultId.value]"
                  },
                  "logAnalyticsId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-logAnalytics001', parameters('Sysguid'))), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1639676517037463072"
                    }
                  },
                  "parameters": {
                    "keyVaultId": {
                      "type": "string"
                    },
                    "logAnalyticsId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "keyVaultName": "[if(greaterOrEquals(length(split(parameters('keyVaultId'), '/')), 9), last(split(parameters('keyVaultId'), '/')), 'incorrectSegmentLength')]",
                    "logAnalyticsSubscriptionId": "[if(greaterOrEquals(length(split(parameters('logAnalyticsId'), '/')), 9), split(parameters('logAnalyticsId'), '/')[2], subscription().subscriptionId)]",
                    "logAnalyticsResourceGroupName": "[if(greaterOrEquals(length(split(parameters('logAnalyticsId'), '/')), 9), split(parameters('logAnalyticsId'), '/')[4], resourceGroup().name)]",
                    "logAnalyticsName": "[if(greaterOrEquals(length(split(parameters('logAnalyticsId'), '/')), 9), last(split(parameters('logAnalyticsId'), '/')), 'incorrectSegmentLength')]",
                    "logAnalyticsWorkspaceIdSecretName": "[format('{0}Id', variables('logAnalyticsName'))]",
                    "logAnalyticsWorkspaceKeySecretName": "[format('{0}Key', variables('logAnalyticsName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('logAnalyticsWorkspaceIdSecretName'))]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "contentType": "text/plain",
                        "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('logAnalyticsSubscriptionId'), variables('logAnalyticsResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2020-10-01').customerId]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('logAnalyticsWorkspaceKeySecretName'))]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "contentType": "text/plain",
                        "value": "[listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('logAnalyticsSubscriptionId'), variables('logAnalyticsResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2020-10-01').primarySharedKey]"
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceIdSecretName": {
                      "type": "string",
                      "value": "[variables('logAnalyticsWorkspaceIdSecretName')]"
                    },
                    "logAnalyticsWorkspaceKeySecretName": {
                      "type": "string",
                      "value": "[variables('logAnalyticsWorkspaceKeySecretName')]"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "value": "[variables('logAnalyticsName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-keyVault001', parameters('Sysguid')))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-logAnalytics001', parameters('Sysguid')))]"
              ]
            }
          ],
          "outputs": {
            "logAnalytics001WorkspaceKeyVaultId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-keyVault001', parameters('Sysguid'))), '2022-09-01').outputs.keyvaultId.value]"
            },
            "logAnalytics001WorkspaceIdSecretName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-lA001Secret', parameters('Sysguid'))), '2022-09-01').outputs.logAnalyticsWorkspaceIdSecretName.value]"
            },
            "logAnalytics001WorkspaceKeySecretName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-lA001Secret', parameters('Sysguid'))), '2022-09-01').outputs.logAnalyticsWorkspaceKeySecretName.value]"
            },
            "logAnalytics001WorkspaceName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-lA001Secret', parameters('Sysguid'))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-logging', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "condition": "[equals(parameters('partner'), 'genericaks')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-appservicesaks', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "clusterName": {
            "value": "[parameters('clusterName')]"
          },
          "aksIdentityName": {
            "value": "[parameters('aksIdentityName')]"
          },
          "rgName": {
            "value": "[format('{0}-appservices', variables('name'))]"
          },
          "aksuseraccessprincipalId": {
            "value": "[parameters('aksuseraccessprincipalId')]"
          },
          "aksadminaccessprincipalId": {
            "value": "[parameters('aksadminaccessprincipalId')]"
          },
          "acrName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-sharedIntServices', variables('Sysguid'))), '2022-09-01').outputs.integrationAcrName.value]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-sharedIntServices', variables('Sysguid'))), '2022-09-01').outputs.integrationKeyVaultName.value]"
          },
          "rtAKSName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.routeTableName.value]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.appServicesSubnetName.value]"
          },
          "akslaWorkspaceRGName": {
            "value": "[format('{0}-logging', variables('name'))]"
          },
          "akslaWorkspaceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-logging', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-loggingServices', variables('Sysguid'))), '2022-09-01').outputs.logAnalytics001WorkspaceName.value]"
          },
          "keyVaultRGName": {
            "value": "[format('{0}-shared-integration', variables('name'))]"
          },
          "acrRGName": {
            "value": "[format('{0}-shared-integration', variables('name'))]"
          },
          "vnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.vnetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "9750541733911170116"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string",
              "defaultValue": ""
            },
            "tags": {
              "type": "object",
              "defaultValue": {
                "value": {}
              }
            },
            "rgName": {
              "type": "string",
              "metadata": {
                "description": ""
              }
            },
            "clusterName": {
              "type": "string"
            },
            "akslaWorkspaceName": {
              "type": "string"
            },
            "akslaWorkspaceRGName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "vnetRgName": {
              "type": "string",
              "defaultValue": "[parameters('rgName')]"
            },
            "aksuseraccessprincipalId": {
              "type": "string"
            },
            "aksadminaccessprincipalId": {
              "type": "string"
            },
            "aksIdentityName": {
              "type": "string"
            },
            "rtAKSName": {
              "type": "string"
            },
            "rtRGName": {
              "type": "string",
              "defaultValue": "[parameters('rgName')]"
            },
            "availabilityZones": {
              "type": "array",
              "defaultValue": [
                "1",
                "2",
                "3"
              ]
            },
            "enableAutoScaling": {
              "type": "bool",
              "defaultValue": true
            },
            "autoScalingProfile": {
              "type": "object",
              "defaultValue": {
                "balance-similar-node-groups": "false",
                "expander": "random",
                "max-empty-bulk-delete": "10",
                "max-graceful-termination-sec": "600",
                "max-node-provision-time": "15m",
                "max-total-unready-percentage": "45",
                "new-pod-scale-up-delay": "0s",
                "ok-total-unready-count": "3",
                "scale-down-delay-after-add": "10m",
                "scale-down-delay-after-delete": "10s",
                "scale-down-delay-after-failure": "3m",
                "scale-down-unneeded-time": "10m",
                "scale-down-unready-time": "20m",
                "scale-down-utilization-threshold": "0.5",
                "scan-interval": "10s",
                "skip-nodes-with-local-storage": "false",
                "skip-nodes-with-system-pods": "true"
              }
            },
            "podCidr": {
              "type": "string",
              "defaultValue": "172.18.0.0/16"
            },
            "upgradeChannel": {
              "type": "string",
              "defaultValue": "rapid"
            },
            "nodeOSUpgradeChannel": {
              "type": "string",
              "defaultValue": "NodeImage"
            },
            "systemNodePoolReplicas": {
              "type": "int",
              "defaultValue": 1
            },
            "userNodePool1Replicas": {
              "type": "int",
              "defaultValue": 1
            },
            "userNodePool2Replicas": {
              "type": "int",
              "defaultValue": 1
            },
            "systemNodePoolSku": {
              "type": "string",
              "defaultValue": "Standard_D4lds_v5"
            },
            "userNodePool1Sku": {
              "type": "string",
              "defaultValue": "Standard_D4lds_v5"
            },
            "userNodePool2Sku": {
              "type": "string",
              "defaultValue": "Standard_D4lds_v5"
            },
            "keyVaultRGName": {
              "type": "string"
            },
            "acrRGName": {
              "type": "string"
            },
            "networkPlugin": {
              "type": "string",
              "defaultValue": "kubenet",
              "allowedValues": [
                "azure",
                "kubenet"
              ]
            },
            "acrName": {
              "type": "string"
            },
            "keyvaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[parameters('aksIdentityName')]",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "identityName": {
                    "value": "[parameters('aksIdentityName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "17677217458404101718"
                    }
                  },
                  "parameters": {
                    "identityName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('identityName')]",
                      "location": "[parameters('location')]"
                    }
                  ],
                  "outputs": {
                    "identityid": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
                    },
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').clientId]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksPodIdentityRole",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName')), '2022-09-01').outputs.principalId.value]"
                  },
                  "roleGuid": {
                    "value": "f1a07417-d97a-45cb-824c-7a7467783830"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1673633896658120266"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "privatednsAKSZone",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDNSZoneName": {
                    "value": "[format('privatelink.{0}.azmk8s.io', toLower(parameters('location')))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "17903569651808746363"
                    }
                  },
                  "parameters": {
                    "privateDNSZoneName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDNSZoneName')]",
                      "location": "global"
                    }
                  ],
                  "outputs": {
                    "privateDNSZoneName": {
                      "type": "string",
                      "value": "[parameters('privateDNSZoneName')]"
                    },
                    "privateDNSZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "privateDNSLinkAKS",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'privatednsAKSZone'), '2022-09-01').outputs.privateDNSZoneName.value]"
                  },
                  "vnetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRgName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "6732264107945475420"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string"
                    },
                    "vnetId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}-link-hub', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'privatednsAKSZone')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksPolicy",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "16157729545865568700"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2021-06-01",
                      "name": "EnableDefenderForAKS",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/64def556-fbad-4622-930e-72d1d5589bf5"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksCluster",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "autoScalingProfile": {
                    "value": "[parameters('autoScalingProfile')]"
                  },
                  "enableAutoScaling": {
                    "value": "[parameters('enableAutoScaling')]"
                  },
                  "availabilityZones": {
                    "value": "[parameters('availabilityZones')]"
                  },
                  "userNodePool1Sku": {
                    "value": "[parameters('userNodePool1Sku')]"
                  },
                  "userNodePool2Sku": {
                    "value": "[parameters('userNodePool2Sku')]"
                  },
                  "systemNodePoolSku": {
                    "value": "[parameters('systemNodePoolSku')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "aadGroupdIds": {
                    "value": [
                      "[parameters('aksadminaccessprincipalId')]"
                    ]
                  },
                  "clusterName": {
                    "value": "[parameters('clusterName')]"
                  },
                  "userNodePool1Replicas": {
                    "value": "[parameters('userNodePool1Replicas')]"
                  },
                  "userNodePool2Replicas": {
                    "value": "[parameters('userNodePool2Replicas')]"
                  },
                  "systemNodePoolReplicas": {
                    "value": "[parameters('systemNodePoolReplicas')]"
                  },
                  "nodeOSUpgradeChannel": {
                    "value": "[parameters('nodeOSUpgradeChannel')]"
                  },
                  "upgradeChannel": {
                    "value": "[parameters('upgradeChannel')]"
                  },
                  "networkPlugin": {
                    "value": "[parameters('networkPlugin')]"
                  },
                  "logworkspaceid": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('akslaWorkspaceRGName')), 'Microsoft.OperationalInsights/workspaces', parameters('akslaWorkspaceName'))]"
                  },
                  "privateDNSZoneId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'privatednsAKSZone'), '2022-09-01').outputs.privateDNSZoneId.value]"
                  },
                  "subnetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRgName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                  },
                  "identity": {
                    "value": {
                      "[format('{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName')), '2022-09-01').outputs.identityid.value)]": {}
                    }
                  },
                  "podCidr": {
                    "value": "[parameters('podCidr')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1502484792215287304"
                    }
                  },
                  "parameters": {
                    "clusterName": {
                      "type": "string"
                    },
                    "logworkspaceid": {
                      "type": "string"
                    },
                    "privateDNSZoneId": {
                      "type": "string"
                    },
                    "aadGroupdIds": {
                      "type": "array"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "identity": {
                      "type": "object"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "availabilityZones": {
                      "type": "array"
                    },
                    "enableAutoScaling": {
                      "type": "bool"
                    },
                    "autoScalingProfile": {
                      "type": "object"
                    },
                    "podCidr": {
                      "type": "string"
                    },
                    "upgradeChannel": {
                      "type": "string"
                    },
                    "nodeOSUpgradeChannel": {
                      "type": "string"
                    },
                    "systemNodePoolReplicas": {
                      "type": "int"
                    },
                    "userNodePool1Replicas": {
                      "type": "int"
                    },
                    "userNodePool2Replicas": {
                      "type": "int"
                    },
                    "systemNodePoolSku": {
                      "type": "string"
                    },
                    "userNodePool1Sku": {
                      "type": "string"
                    },
                    "userNodePool2Sku": {
                      "type": "string"
                    },
                    "networkPlugin": {
                      "type": "string",
                      "defaultValue": "kubenet",
                      "allowedValues": [
                        "azure",
                        "kubenet"
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2022-11-01",
                      "name": "[parameters('clusterName')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": "[parameters('identity')]"
                      },
                      "properties": {
                        "nodeResourceGroup": "[format('{0}-aksInfraRG', parameters('clusterName'))]",
                        "dnsPrefix": "[format('{0}aks', parameters('clusterName'))]",
                        "agentPoolProfiles": [
                          {
                            "enableAutoScaling": "[parameters('enableAutoScaling')]",
                            "name": "systempool",
                            "availabilityZones": "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), null())]",
                            "mode": "System",
                            "enableEncryptionAtHost": true,
                            "count": "[parameters('systemNodePoolReplicas')]",
                            "nodeTaints": [
                              "CriticalAddonsOnly=true:NoSchedule"
                            ],
                            "minCount": "[if(parameters('enableAutoScaling'), 1, null())]",
                            "maxCount": "[if(parameters('enableAutoScaling'), 3, null())]",
                            "vmSize": "[parameters('systemNodePoolSku')]",
                            "osDiskSizeGB": 30,
                            "type": "VirtualMachineScaleSets",
                            "vnetSubnetID": "[parameters('subnetId')]"
                          },
                          {
                            "enableAutoScaling": "[parameters('enableAutoScaling')]",
                            "name": "usernp1",
                            "availabilityZones": "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), null())]",
                            "mode": "User",
                            "enableEncryptionAtHost": true,
                            "count": "[parameters('userNodePool1Replicas')]",
                            "minCount": "[if(parameters('enableAutoScaling'), 1, null())]",
                            "maxCount": "[if(parameters('enableAutoScaling'), 3, null())]",
                            "vmSize": "[parameters('userNodePool1Sku')]",
                            "osDiskSizeGB": 30,
                            "type": "VirtualMachineScaleSets",
                            "vnetSubnetID": "[parameters('subnetId')]"
                          },
                          {
                            "enableAutoScaling": "[parameters('enableAutoScaling')]",
                            "name": "usernp2",
                            "availabilityZones": "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), null())]",
                            "mode": "User",
                            "enableEncryptionAtHost": true,
                            "count": "[parameters('userNodePool2Replicas')]",
                            "minCount": "[if(parameters('enableAutoScaling'), 1, null())]",
                            "maxCount": "[if(parameters('enableAutoScaling'), 3, null())]",
                            "vmSize": "[parameters('userNodePool2Sku')]",
                            "osDiskSizeGB": 30,
                            "type": "VirtualMachineScaleSets",
                            "vnetSubnetID": "[parameters('subnetId')]"
                          }
                        ],
                        "autoScalerProfile": "[if(parameters('enableAutoScaling'), parameters('autoScalingProfile'), null())]",
                        "autoUpgradeProfile": {
                          "nodeOSUpgradeChannel": "[parameters('nodeOSUpgradeChannel')]",
                          "upgradeChannel": "[parameters('upgradeChannel')]"
                        },
                        "disableLocalAccounts": true,
                        "networkProfile": "[if(equals(parameters('networkPlugin'), 'azure'), createObject('networkPlugin', 'azure', 'outboundType', 'userDefinedRouting', 'dockerBridgeCidr', '172.16.1.1/30', 'dnsServiceIP', '192.168.100.10', 'serviceCidr', '192.168.100.0/24', 'networkPolicy', 'calico'), createObject('networkPlugin', 'kubenet', 'outboundType', 'userDefinedRouting', 'dockerBridgeCidr', '172.16.1.1/30', 'dnsServiceIP', '192.168.100.10', 'serviceCidr', '192.168.100.0/24', 'networkPolicy', 'calico', 'podCidr', parameters('podCidr')))]",
                        "apiServerAccessProfile": {
                          "enablePrivateCluster": true,
                          "disableRunCommand": true,
                          "privateDNSZone": "[parameters('privateDNSZoneId')]",
                          "enablePrivateClusterPublicFQDN": false
                        },
                        "enableRBAC": true,
                        "aadProfile": {
                          "adminGroupObjectIDs": "[parameters('aadGroupdIds')]",
                          "enableAzureRBAC": true,
                          "managed": true,
                          "tenantID": "[subscription().tenantId]"
                        },
                        "securityProfile": {
                          "defender": {
                            "logAnalyticsWorkspaceResourceId": "[parameters('logworkspaceid')]",
                            "securityMonitoring": {
                              "enabled": true
                            }
                          }
                        },
                        "addonProfiles": {
                          "omsagent": {
                            "config": {
                              "logAnalyticsWorkspaceResourceID": "[parameters('logworkspaceid')]"
                            },
                            "enabled": true
                          },
                          "azurepolicy": {
                            "enabled": true
                          },
                          "azureKeyvaultSecretsProvider": {
                            "enabled": true
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('clusterName'))]",
                      "name": "aksdiagnostics",
                      "properties": {
                        "logs": [
                          {
                            "category": "kube-audit-admin",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": true
                            }
                          }
                        ],
                        "metrics": [
                          {
                            "category": "AllMetrics",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": true
                            }
                          }
                        ],
                        "workspaceId": "[parameters('logworkspaceid')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "kubeletIdentity": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2022-11-01').identityProfile.kubeletidentity.objectId]"
                    },
                    "keyvaultaddonIdentity": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2022-11-01').addonProfiles.azureKeyvaultSecretsProvider.identity.objectId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksPodIdentityRole')]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksPolicy')]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksPvtDNSContrib')]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRgName')), 'Microsoft.Resources/deployments', 'aksPvtNetworkContrib')]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'privatednsAKSZone')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksRouteTableRole",
              "resourceGroup": "[parameters('rtRGName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName')), '2022-09-01').outputs.principalId.value]"
                  },
                  "roleGuid": {
                    "value": "4d97b98b-1d4f-4787-a291-c67834d212e7"
                  },
                  "rtName": {
                    "value": "[parameters('rtAKSName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "4511621951638129866"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    },
                    "rtName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('rtName'))]",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'), parameters('rtName'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "acraksaccess",
              "resourceGroup": "[parameters('acrRGName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksCluster'), '2022-09-01').outputs.kubeletIdentity.value]"
                  },
                  "roleGuid": {
                    "value": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
                  },
                  "acrName": {
                    "value": "[parameters('acrName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "11779971635907504083"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    },
                    "acrName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksCluster')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksPvtNetworkContrib",
              "resourceGroup": "[parameters('vnetRgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName')), '2022-09-01').outputs.principalId.value]"
                  },
                  "roleGuid": {
                    "value": "4d97b98b-1d4f-4787-a291-c67834d212e7"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "5586128704647930031"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vnetName'))]",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksPvtDNSContrib",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName')), '2022-09-01').outputs.principalId.value]"
                  },
                  "roleGuid": {
                    "value": "b12aa53e-6015-4669-85d0-8515ebb3ae7f"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "7160710047713903843"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}', format('privatelink.{0}.azmk8s.io', toLower(parameters('location'))))]",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vmContributeRole",
              "resourceGroup": "[format('{0}-aksInfraRG', parameters('clusterName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName')), '2022-09-01').outputs.principalId.value]"
                  },
                  "roleGuid": {
                    "value": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1673633896658120266"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksCluster')]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', parameters('aksIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksuseraccess",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('aksuseraccessprincipalId')]"
                  },
                  "roleGuid": {
                    "value": "4abbcc35-e782-43d8-92c5-2d3f1bd2253f"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1673633896658120266"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksuseraccessRBAC",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('aksuseraccessprincipalId')]"
                  },
                  "roleGuid": {
                    "value": "7f6c6a51-bcf8-42ba-9220-52d62157d7db"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1673633896658120266"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksadminaccess",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('aksadminaccessprincipalId')]"
                  },
                  "roleGuid": {
                    "value": "0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1673633896658120266"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aksadminaccessRBAC",
              "resourceGroup": "[parameters('rgName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('aksadminaccessprincipalId')]"
                  },
                  "roleGuid": {
                    "value": "b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1673633896658120266"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "roleGuid": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(subscription().id, parameters('principalId'), parameters('roleGuid'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleGuid'))]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "akskeyvaultaddonaccesspolicy",
              "resourceGroup": "[parameters('keyVaultRGName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyvaultManagedIdentityObjectId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksCluster'), '2022-09-01').outputs.keyvaultaddonIdentity.value]"
                  },
                  "vaultName": {
                    "value": "[parameters('keyvaultName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "14023993567189730068"
                    }
                  },
                  "parameters": {
                    "keyvaultManagedIdentityObjectId": {
                      "type": "string"
                    },
                    "vaultName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[format('{0}/add', parameters('vaultName'))]",
                      "properties": {
                        "accessPolicies": [
                          {
                            "objectId": "[parameters('keyvaultManagedIdentityObjectId')]",
                            "permissions": {
                              "secrets": [
                                "get",
                                "list"
                              ]
                            },
                            "tenantId": "[subscription().tenantId]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgName')), 'Microsoft.Resources/deployments', 'aksCluster')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-logging', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-logging', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-loggingServices', variables('Sysguid')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-shared-integration', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-sharedIntServices', variables('Sysguid')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-fileShareServices', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-appservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.appServicesSubnetId.value]"
          },
          "privateDnsZoneIdBlob": {
            "value": "[parameters('privateDnsZoneIdBlob')]"
          },
          "fileShareName": {
            "value": "appfs"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "16802723246431589063"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "privateDnsZoneIdBlob": {
              "type": "string",
              "defaultValue": ""
            },
            "prefix": {
              "type": "string"
            },
            "fileShareName": {
              "type": "string",
              "maxLength": 63,
              "minLength": 3,
              "metadata": {
                "description": "Specifies the name of the File Share. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only."
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "[format('storage{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specifies the name of the Azure Storage account."
              }
            }
          },
          "variables": {
            "storageNameCleaned": "[replace(parameters('storageAccountName'), '-', '')]",
            "storagePrivateEndpointNameFileShare": "[format('{0}-fileshare-private-endpoint', variables('storageNameCleaned'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[variables('storageNameCleaned')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/default/{1}', variables('storageNameCleaned'), parameters('fileShareName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-11-01",
              "name": "[variables('storagePrivateEndpointNameFileShare')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "manualPrivateLinkServiceConnections": [],
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('storagePrivateEndpointNameFileShare')]",
                    "properties": {
                      "groupIds": [
                        "blob"
                      ],
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                      "requestMessage": ""
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameFileShare'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameFileShare'))]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameFileShare'))]"
              ]
            }
          ],
          "outputs": {
            "storageId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-appservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-dataServices', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-dataservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.dataServicesSubnetId.value]"
          },
          "privateDnsZoneIdBlob": {
            "value": "[parameters('privateDnsZoneIdBlob')]"
          },
          "Sysguid": {
            "value": "[variables('Sysguid')]"
          },
          "mainframeLandingZoneSubscriptionIds": {
            "value": "[parameters('mainframeLandingZoneSubscriptionIds')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "4449671580002469476"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "privateDnsZoneIdBlob": {
              "type": "string",
              "defaultValue": ""
            },
            "mainframeLandingZoneSubscriptionIds": {
              "type": "array",
              "defaultValue": []
            },
            "Sysguid": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "storageRawName": "[format('raw-{0}', uniqueString(resourceGroup().id))]",
            "storageEnrichedCuratedName": "[format('encur-{0}', uniqueString(resourceGroup().id))]",
            "storageWorkspaceName": "[format('work-{0}', uniqueString(resourceGroup().id))]",
            "domainFileSytemNames": [
              "data",
              "di001",
              "di002"
            ],
            "dataProductFileSystemNames": [
              "data",
              "dp001",
              "dp002"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-storageRaw', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageRawName')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "Sysguid": {
                    "value": "[parameters('Sysguid')]"
                  },
                  "fileSystemNames": {
                    "value": "[variables('domainFileSytemNames')]"
                  },
                  "mainframeLandingZoneSubscriptionIds": {
                    "value": "[parameters('mainframeLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "17131480228261306454"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDfs": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "mainframeLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "Sysguid": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storagePrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "storagePrivateEndpointNameDfs": "[format('{0}-dfs-private-endpoint', variables('storageNameCleaned'))]",
                    "purviewResourceAccessRules": {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[parameters('purviewId')]"
                    },
                    "resourceAccessRules": "[if(empty(parameters('purviewId')), variables('synapseResourceAccessrules'), union(variables('synapseResourceAccessrules'), array(variables('purviewResourceAccessRules'))))]",
                    "storageZrsRegions": [
                      "southafricanorth",
                      "australiaeast",
                      "centralindia",
                      "eastasia",
                      "japaneast",
                      "koreacentral",
                      "southeastasia",
                      "canadacentral",
                      "francecentral",
                      "germanywestcentral",
                      "northeurope",
                      "norwayeast",
                      "swedencentral",
                      "uksouth",
                      "westeurope",
                      "brazilsouth",
                      "centralus",
                      "eastus",
                      "eastus2",
                      "southcentralus",
                      "westus2",
                      "westus3"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[if(contains(variables('storageZrsRegions'), parameters('location')), 'Standard_ZRS', 'Standard_LRS')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": true,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', format('{0}', parameters('fileSystemNames')[copyIndex()]))]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameBlob'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameDfs')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameDfs')]",
                            "properties": {
                              "groupIds": [
                                "dfs"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDfs')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameDfs'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameDfs'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDfs')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameDfs'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-storageEnrichedCurated', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageEnrichedCuratedName')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "fileSystemNames": {
                    "value": "[variables('domainFileSytemNames')]"
                  },
                  "mainframeLandingZoneSubscriptionIds": {
                    "value": "[parameters('mainframeLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "17131480228261306454"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDfs": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "mainframeLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "Sysguid": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storagePrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "storagePrivateEndpointNameDfs": "[format('{0}-dfs-private-endpoint', variables('storageNameCleaned'))]",
                    "purviewResourceAccessRules": {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[parameters('purviewId')]"
                    },
                    "resourceAccessRules": "[if(empty(parameters('purviewId')), variables('synapseResourceAccessrules'), union(variables('synapseResourceAccessrules'), array(variables('purviewResourceAccessRules'))))]",
                    "storageZrsRegions": [
                      "southafricanorth",
                      "australiaeast",
                      "centralindia",
                      "eastasia",
                      "japaneast",
                      "koreacentral",
                      "southeastasia",
                      "canadacentral",
                      "francecentral",
                      "germanywestcentral",
                      "northeurope",
                      "norwayeast",
                      "swedencentral",
                      "uksouth",
                      "westeurope",
                      "brazilsouth",
                      "centralus",
                      "eastus",
                      "eastus2",
                      "southcentralus",
                      "westus2",
                      "westus3"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[if(contains(variables('storageZrsRegions'), parameters('location')), 'Standard_ZRS', 'Standard_LRS')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": true,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', format('{0}', parameters('fileSystemNames')[copyIndex()]))]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameBlob'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameDfs')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameDfs')]",
                            "properties": {
                              "groupIds": [
                                "dfs"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDfs')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameDfs'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameDfs'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDfs')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameDfs'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-storageWorkspace', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageWorkspaceName')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "fileSystemNames": {
                    "value": "[variables('dataProductFileSystemNames')]"
                  },
                  "mainframeLandingZoneSubscriptionIds": {
                    "value": "[parameters('mainframeLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "17131480228261306454"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDfs": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "mainframeLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "Sysguid": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storagePrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "storagePrivateEndpointNameDfs": "[format('{0}-dfs-private-endpoint', variables('storageNameCleaned'))]",
                    "purviewResourceAccessRules": {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[parameters('purviewId')]"
                    },
                    "resourceAccessRules": "[if(empty(parameters('purviewId')), variables('synapseResourceAccessrules'), union(variables('synapseResourceAccessrules'), array(variables('purviewResourceAccessRules'))))]",
                    "storageZrsRegions": [
                      "southafricanorth",
                      "australiaeast",
                      "centralindia",
                      "eastasia",
                      "japaneast",
                      "koreacentral",
                      "southeastasia",
                      "canadacentral",
                      "francecentral",
                      "germanywestcentral",
                      "northeurope",
                      "norwayeast",
                      "swedencentral",
                      "uksouth",
                      "westeurope",
                      "brazilsouth",
                      "centralus",
                      "eastus",
                      "eastus2",
                      "southcentralus",
                      "westus2",
                      "westus3"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[if(contains(variables('storageZrsRegions'), parameters('location')), 'Standard_ZRS', 'Standard_LRS')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": true,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', format('{0}', parameters('fileSystemNames')[copyIndex()]))]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameBlob'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameDfs')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameDfs')]",
                            "properties": {
                              "groupIds": [
                                "dfs"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDfs')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameDfs'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameDfs'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDfs')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameDfs'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "storageRawId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storageRaw', parameters('Sysguid'))), '2022-09-01').outputs.storageId.value]"
            },
            "storageRawFileSystemId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storageRaw', parameters('Sysguid'))), '2022-09-01').outputs.storageFileSystemIds.value[0].storageFileSystemId]"
            },
            "storageEnrichedCuratedId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storageEnrichedCurated', parameters('Sysguid'))), '2022-09-01').outputs.storageId.value]"
            },
            "storageEnrichedCuratedFileSystemId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storageEnrichedCurated', parameters('Sysguid'))), '2022-09-01').outputs.storageFileSystemIds.value[0].storageFileSystemId]"
            },
            "storageWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storageWorkspace', parameters('Sysguid'))), '2022-09-01').outputs.storageId.value]"
            },
            "storageWorkspaceFileSystemId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storageWorkspace', parameters('Sysguid'))), '2022-09-01').outputs.storageFileSystemIds.value[0].storageFileSystemId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-dataservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-data01', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-dataservices', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.dataServicesSubnetId.value]"
          },
          "administratorUsername": {
            "value": "[variables('sqlAdministratorUsername')]"
          },
          "administratorPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "sqlserverAdminGroupName": {
            "value": "[variables('sqlserverAdminGroupName')]"
          },
          "sqlserverAdminGroupObjectID": {
            "value": "[variables('sqlserverAdminGroupObjectID')]"
          },
          "sqlserverName": {
            "value": "[variables('sqlServer001Name')]"
          },
          "privateDnsZoneIdSqlServer": {
            "value": "[parameters('privateDnsZoneIdSqlServer')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "17798129350354293536"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "sqlserverName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "administratorUsername": {
              "type": "string",
              "defaultValue": "SqlServerMainUser"
            },
            "administratorPassword": {
              "type": "securestring"
            },
            "sqlserverAdminGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "sqlserverAdminGroupObjectID": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdSqlServer": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "sqlserverDbName": "InitialDataDb",
            "sqlserverPrivateEndpointName": "[format('{0}-private-endpoint', variables('sqlserverNameLabel'))]",
            "sqlserverNameLabel": "[format('{0}-{1}', parameters('sqlserverName'), uniqueString(resourceGroup().id))]"
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2020-11-01-preview",
              "name": "[variables('sqlserverNameLabel')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "administratorLogin": "[parameters('administratorUsername')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "administrators": {},
                "minimalTlsVersion": "1.2",
                "publicNetworkAccess": "Disabled",
                "version": "12.0"
              }
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2020-11-01-preview",
              "name": "[format('{0}/{1}', variables('sqlserverNameLabel'), variables('sqlserverDbName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 5
              },
              "properties": {
                "autoPauseDelay": -1,
                "catalogCollation": "DATABASE_DEFAULT",
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "createMode": "Default",
                "readScale": "Disabled",
                "highAvailabilityReplicaCount": 0,
                "licenseType": "LicenseIncluded",
                "maxSizeBytes": 524288000,
                "minCapacity": 1,
                "requestedBackupStorageRedundancy": "Geo",
                "zoneRedundant": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sqlserverNameLabel'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-11-01",
              "name": "[variables('sqlserverPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "manualPrivateLinkServiceConnections": [],
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('sqlserverPrivateEndpointName')]",
                    "properties": {
                      "groupIds": [
                        "sqlServer"
                      ],
                      "privateLinkServiceId": "[resourceId('Microsoft.Sql/servers', variables('sqlserverNameLabel'))]",
                      "requestMessage": ""
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sqlserverNameLabel'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneIdSqlServer')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', variables('sqlserverPrivateEndpointName'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-arecord', variables('sqlserverPrivateEndpointName'))]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneIdSqlServer')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('sqlserverPrivateEndpointName'))]"
              ]
            }
          ],
          "outputs": {
            "sqlServerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers', variables('sqlserverNameLabel'))]"
            },
            "sqlServerDatabaseName": {
              "type": "string",
              "value": "[variables('sqlserverDbName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-dataservices', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-externalStorageServices', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-externalstorage', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "Sysguid": {
            "value": "[variables('Sysguid')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.externalStorageSubnetId.value]"
          },
          "privateDnsZoneIdBlob": {
            "value": "[parameters('privateDnsZoneIdBlob')]"
          },
          "mainframeLandingZoneSubscriptionIds": {
            "value": "[parameters('mainframeLandingZoneSubscriptionIds')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "445857928860053355"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "privateDnsZoneIdBlob": {
              "type": "string",
              "defaultValue": ""
            },
            "mainframeLandingZoneSubscriptionIds": {
              "type": "array",
              "defaultValue": []
            },
            "Sysguid": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "storageExternal001Name": "[format('ext001-{0}', uniqueString(resourceGroup().id))]",
            "fileSytemNames": [
              "data"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-storageExternal001', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageExternal001Name')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "fileSytemNames": {
                    "value": "[variables('fileSytemNames')]"
                  },
                  "mainframeLandingZoneSubscriptionIds": {
                    "value": "[parameters('mainframeLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "4726906619942535976"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSytemNames": {
                      "type": "array",
                      "defaultValue": [
                        "data"
                      ]
                    },
                    "mainframeLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('mainframeLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storageExternalPrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "resourceAccessRules": "[variables('synapseResourceAccessrules')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "Standard_ZRS"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": false,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageExternalFileSystems",
                        "count": "[length(parameters('fileSytemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSytemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storageExternalPrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storageExternalPrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storageExternalPrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storageExternalPrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storageExternalPrivateEndpointNameBlob'))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-externalstorage', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-sharedIntServices', variables('Sysguid'))]",
      "resourceGroup": "[format('{0}-shared-integration', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.dataIntegrationSubnetId.value]"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.vnetId.value]"
          },
          "Sysguid": {
            "value": "[variables('Sysguid')]"
          },
          "storageRawId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-dataservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-dataServices', variables('Sysguid'))), '2022-09-01').outputs.storageRawId.value]"
          },
          "storageAccountRawFileSystemId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-dataservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-dataServices', variables('Sysguid'))), '2022-09-01').outputs.storageRawFileSystemId.value]"
          },
          "storageEnrichedCuratedId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-dataservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-dataServices', variables('Sysguid'))), '2022-09-01').outputs.storageEnrichedCuratedId.value]"
          },
          "storageAccountEnrichedCuratedFileSystemId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-dataservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-dataServices', variables('Sysguid'))), '2022-09-01').outputs.storageEnrichedCuratedFileSystemId.value]"
          },
          "privateDnsZoneIdKeyVault": {
            "value": "[parameters('privateDnsZoneIdKeyVault')]"
          },
          "privateDnsZoneIdDataFactory": {
            "value": "[parameters('privateDnsZoneIdDataFactory')]"
          },
          "privateDnsZoneIdDataFactoryPortal": {
            "value": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
          },
          "IsForContainerizedWorkoad": {
            "value": "[variables('IsForContainerizedWorkoad')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "7651257888521437348"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "storageAccountRawFileSystemId": {
              "type": "string"
            },
            "storageAccountEnrichedCuratedFileSystemId": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "storageRawId": {
              "type": "string"
            },
            "storageEnrichedCuratedId": {
              "type": "string"
            },
            "privateDnsZoneIdKeyVault": {
              "type": "string"
            },
            "privateDnsZoneIdDataFactory": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdDataFactoryPortal": {
              "type": "string",
              "defaultValue": ""
            },
            "IsForContainerizedWorkoad": {
              "type": "bool",
              "defaultValue": false
            },
            "Sysguid": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "keyVault001Name": "[format('{0}-vault001', parameters('prefix'))]",
            "acr001Name": "[format('acr001{0}', uniqueString(resourceGroup().id))]",
            "datafactoryIntegration001Name": "[format('{0}-integration-datafactory001', parameters('prefix'))]",
            "storageAccountRawSubscriptionId": "[if(greaterOrEquals(length(split(parameters('storageAccountRawFileSystemId'), '/')), 13), split(parameters('storageAccountRawFileSystemId'), '/')[2], subscription().subscriptionId)]",
            "storageAccountRawResourceGroupName": "[if(greaterOrEquals(length(split(parameters('storageAccountRawFileSystemId'), '/')), 13), split(parameters('storageAccountRawFileSystemId'), '/')[4], resourceGroup().name)]",
            "storageAccountEnrichedCuratedSubscriptionId": "[if(greaterOrEquals(length(split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')), 13), split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')[2], subscription().subscriptionId)]",
            "storageAccountEnrichedCuratedResourceGroupName": "[if(greaterOrEquals(length(split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')), 13), split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')[4], resourceGroup().name)]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-keyVault001', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "keyvaultName": {
                    "value": "[variables('keyVault001Name')]"
                  },
                  "privateDnsZoneIdKeyVault": {
                    "value": "[parameters('privateDnsZoneIdKeyVault')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "5916970951876729132"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "keyvaultName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdKeyVault": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "keyVaultPrivateEndpointName": "[format('{0}-private-endpoint', parameters('keyvaultName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('keyvaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "accessPolicies": [],
                        "createMode": "default",
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "softDeleteRetentionInDays": 7,
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('keyVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('keyVaultPrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "vault"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdKeyVault')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('keyVaultPrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdKeyVault')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyvaultId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyvaultName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('IsForContainerizedWorkoad')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-acr001', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "acrName": {
                    "value": "[variables('acr001Name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "5459315127470700797"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object"
                    },
                    "acrName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[parameters('acrName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "basic"
                      },
                      "properties": {
                        "adminUserEnabled": true,
                        "publicNetworkAccess": "Enabled"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "buildAcrImage-linux-dapr",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "AcrName": {
                            "value": "[parameters('acrName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "gitRepositoryUrl": {
                            "value": "https://github.com/Azure-Samples/container-apps-store-api-microservice.git"
                          },
                          "buildWorkingDirectory": {
                            "value": "python-service"
                          },
                          "imageName": {
                            "value": "aca/dapr"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1371553491347240684"
                            }
                          },
                          "parameters": {
                            "AcrName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure Container Registry"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The location of the ACR and where to deploy the module resources to"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "[utcNow()]",
                              "metadata": {
                                "description": "How the deployment script should be forced to execute"
                              }
                            },
                            "rbacRoleNeeded": {
                              "type": "string",
                              "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
                              "metadata": {
                                "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
                              }
                            },
                            "useExistingManagedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Does the Managed Identity already exists, or should be created"
                              }
                            },
                            "managedIdentityName": {
                              "type": "string",
                              "defaultValue": "id-ContainerRegistryBuild",
                              "metadata": {
                                "description": "Name of the Managed Identity resource"
                              }
                            },
                            "existingManagedIdentitySubId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "For an existing Managed Identity, the Subscription Id it is located in"
                              }
                            },
                            "existingManagedIdentityResourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "For an existing Managed Identity, the Resource Group it is located in"
                              }
                            },
                            "initialScriptDelay": {
                              "type": "string",
                              "defaultValue": "30s",
                              "metadata": {
                                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
                              }
                            },
                            "cleanupPreference": {
                              "type": "string",
                              "defaultValue": "OnSuccess",
                              "metadata": {
                                "description": "When the script resource is cleaned up"
                              },
                              "allowedValues": [
                                "OnSuccess",
                                "OnExpiration",
                                "Always"
                              ]
                            },
                            "gitRepositoryUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "The Git Repository URL, eg. https://github.com/YOURORG/YOURREPO.git"
                              }
                            },
                            "gitBranch": {
                              "type": "string",
                              "defaultValue": "main",
                              "metadata": {
                                "description": "The name of the repository branch to use"
                              }
                            },
                            "buildWorkingDirectory": {
                              "type": "string",
                              "defaultValue": ".",
                              "metadata": {
                                "description": "The docker context working directory, change this when your Dockerfile and source files are ALL located in a repo subdirectory"
                              }
                            },
                            "dockerfileDirectory": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The subdirectory relative to the working directory that contains the Dockerfile"
                              }
                            },
                            "dockerfileName": {
                              "type": "string",
                              "defaultValue": "Dockerfile",
                              "metadata": {
                                "description": "The name of the dockerfile"
                              }
                            },
                            "imageName": {
                              "type": "string",
                              "metadata": {
                                "description": "The image name/path you want to create in ACR"
                              }
                            },
                            "imageTag": {
                              "type": "string",
                              "defaultValue": "[string(dateTimeToEpoch(utcNow()))]",
                              "metadata": {
                                "description": "The image tag you want to create"
                              }
                            },
                            "acrBuildPlatform": {
                              "type": "string",
                              "defaultValue": "linux",
                              "metadata": {
                                "description": "The ACR compute platform needed to build the image"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": "#!/bin/bash\nset -e\n\necho \"Waiting on RBAC replication ($initialDelay)\"\nsleep $initialDelay\n\naz acr build --resource-group $acrResourceGroup \\\n  --registry $acrName \\\n  --image $taggedImageName $repo \\\n  --file $dockerfilePath \\\n  --platform $platform",
                            "repo": "[format('{0}#{1}:{2}', parameters('gitRepositoryUrl'), parameters('gitBranch'), parameters('buildWorkingDirectory'))]",
                            "cleanRepoName": "[last(split(parameters('gitRepositoryUrl'), '/'))]",
                            "cleanImageName": "[replace(parameters('imageName'), '/', '')]",
                            "taggedImageName": "[format('{0}:{1}', parameters('imageName'), parameters('imageTag'))]",
                            "dockerfilePath": "[if(not(empty(parameters('dockerfileDirectory'))), format('{0}/{1}', parameters('dockerfileDirectory'), parameters('dockerfileName')), parameters('dockerfileName'))]"
                          },
                          "resources": [
                            {
                              "condition": "[not(parameters('useExistingManagedIdentity'))]",
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('managedIdentityName')]",
                              "location": "[parameters('location')]"
                            },
                            {
                              "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('AcrName'))]",
                              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
                                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2020-10-01",
                              "name": "[format('ACR-Build-{0}-{1}', variables('cleanImageName'), variables('cleanRepoName'))]",
                              "location": "[parameters('location')]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                                }
                              },
                              "kind": "AzureCLI",
                              "properties": {
                                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                                "azCliVersion": "2.30.0",
                                "timeout": "PT45M",
                                "retentionInterval": "P1D",
                                "environmentVariables": [
                                  {
                                    "name": "acrName",
                                    "value": "[parameters('AcrName')]"
                                  },
                                  {
                                    "name": "acrResourceGroup",
                                    "value": "[resourceGroup().name]"
                                  },
                                  {
                                    "name": "taggedImageName",
                                    "value": "[variables('taggedImageName')]"
                                  },
                                  {
                                    "name": "repo",
                                    "value": "[variables('repo')]"
                                  },
                                  {
                                    "name": "dockerfilePath",
                                    "value": "[variables('dockerfilePath')]"
                                  },
                                  {
                                    "name": "platform",
                                    "value": "[parameters('acrBuildPlatform')]"
                                  },
                                  {
                                    "name": "initialDelay",
                                    "value": "[parameters('initialScriptDelay')]"
                                  }
                                ],
                                "scriptContent": "[variables('$fxv#0')]",
                                "cleanupPreference": "[parameters('cleanupPreference')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                                "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "acrImage": {
                              "type": "string",
                              "value": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), '2021-12-01-preview').loginServer, variables('taggedImageName'))]",
                              "metadata": {
                                "description": "The ACR uri the image can be accessed on if building was successful"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "acrid": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
                    },
                    "acrName": {
                      "type": "string",
                      "value": "[parameters('acrName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-dfInt001', parameters('Sysguid'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "datafactoryName": {
                    "value": "[variables('datafactoryIntegration001Name')]"
                  },
                  "privateDnsZoneIdDataFactory": {
                    "value": "[parameters('privateDnsZoneIdDataFactory')]"
                  },
                  "privateDnsZoneIdDataFactoryPortal": {
                    "value": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
                  },
                  "storageRawId": {
                    "value": "[parameters('storageRawId')]"
                  },
                  "storageEnrichedCuratedId": {
                    "value": "[parameters('storageEnrichedCuratedId')]"
                  },
                  "keyVault001Id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-keyVault001', parameters('Sysguid'))), '2022-09-01').outputs.keyvaultId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "13312365522051374336"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "datafactoryName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDataFactory": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdDataFactoryPortal": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "storageRawId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "storageEnrichedCuratedId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "keyVault001Id": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "storageRawName": "[string(if(greaterOrEquals(length(split(parameters('storageRawId'), '/')), 9), last(split(parameters('storageRawId'), '/')), 'incorrectSegmentLength'))]",
                    "storageEnrichedCuratedName": "[string(if(greaterOrEquals(length(split(parameters('storageEnrichedCuratedId'), '/')), 9), last(split(parameters('storageEnrichedCuratedId'), '/')), 'incorrectSegmentLength'))]",
                    "keyVault001Name": "[string(if(greaterOrEquals(length(split(parameters('keyVault001Id'), '/')), 9), last(split(parameters('keyVault001Id'), '/')), 'incorrectSegmentLength'))]",
                    "datafactoryDefaultManagedVnetIntegrationRuntimeName": "AutoResolveIntegrationRuntime",
                    "datafactoryPrivateEndpointNameDatafactory": "[format('{0}-datafactory-private-endpoint', parameters('datafactoryName'))]",
                    "datafactoryPrivateEndpointNamePortal": "[format('{0}-portal-private-endpoint', parameters('datafactoryName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DataFactory/factories",
                      "apiVersion": "2018-06-01",
                      "name": "[parameters('datafactoryName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "globalParameters": {},
                        "publicNetworkAccess": "Disabled"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('datafactoryPrivateEndpointNameDatafactory')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('datafactoryPrivateEndpointNameDatafactory')]",
                            "properties": {
                              "groupIds": [
                                "dataFactory"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDataFactory')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('datafactoryPrivateEndpointNameDatafactory'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('datafactoryPrivateEndpointNameDatafactory'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDataFactory')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('datafactoryPrivateEndpointNameDatafactory'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('datafactoryPrivateEndpointNamePortal')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('datafactoryPrivateEndpointNamePortal')]",
                            "properties": {
                              "groupIds": [
                                "portal"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDataFactoryPortal')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('datafactoryPrivateEndpointNamePortal'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('datafactoryPrivateEndpointNamePortal'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('datafactoryPrivateEndpointNamePortal'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                      "properties": {
                        "type": "Managed",
                        "managedVirtualNetwork": {
                          "type": "ManagedVirtualNetworkReference",
                          "referenceName": "default"
                        },
                        "typeProperties": {
                          "computeProperties": {
                            "location": "AutoResolve"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', replace(variables('keyVault001Name'), '-', ''))]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "vault",
                        "privateLinkResourceId": "[parameters('keyVault001Id')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), replace(variables('keyVault001Name'), '-', ''))]",
                      "properties": {
                        "type": "AzureKeyVault",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Key Vault for storing secrets",
                        "parameters": {},
                        "typeProperties": {
                          "baseUrl": "[format('https://{0}{1}/', variables('keyVault001Name'), environment().suffixes.keyvaultDns)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints', parameters('datafactoryName'), 'default', replace(variables('keyVault001Name'), '-', ''))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', variables('storageRawName'))]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "dfs",
                        "privateLinkResourceId": "[parameters('storageRawId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('storageRawName'))]",
                      "properties": {
                        "type": "AzureBlobFS",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Storage Account for raw data",
                        "parameters": {},
                        "typeProperties": {
                          "url": "[format('https://{0}.dfs.{1}', variables('storageRawName'), environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints', parameters('datafactoryName'), 'default', variables('storageRawName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', variables('storageEnrichedCuratedName'))]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "dfs",
                        "privateLinkResourceId": "[parameters('storageEnrichedCuratedId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('storageEnrichedCuratedName'))]",
                      "properties": {
                        "type": "AzureBlobFS",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Storage Account for raw data",
                        "parameters": {},
                        "typeProperties": {
                          "url": "[format('https://{0}.dfs.{1}', variables('storageEnrichedCuratedName'), environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints', parameters('datafactoryName'), 'default', variables('storageEnrichedCuratedName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "datafactoryId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-keyVault001', parameters('Sysguid')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "datafactory001StorageRawRoleAssignment",
              "subscriptionId": "[variables('storageAccountRawSubscriptionId')]",
              "resourceGroup": "[variables('storageAccountRawResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "datafactoryId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-dfInt001', parameters('Sysguid'))), '2022-09-01').outputs.datafactoryId.value]"
                  },
                  "storageAccountFileSystemId": {
                    "value": "[parameters('storageAccountRawFileSystemId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "16071343366840566594"
                    }
                  },
                  "parameters": {
                    "storageAccountFileSystemId": {
                      "type": "string"
                    },
                    "datafactoryId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "storageAccountFileSystemName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), last(split(parameters('storageAccountFileSystemId'), '/')), 'incorrectSegmentLength')]",
                    "storageAccountName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), split(parameters('storageAccountFileSystemId'), '/')[8], 'incorrectSegmentLength')]",
                    "datafactorySubscriptionId": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[2], subscription().subscriptionId)]",
                    "datafactoryResourceGroupName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[4], resourceGroup().name)]",
                    "datafactoryName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), last(split(parameters('datafactoryId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2])]",
                      "name": "[guid(uniqueString(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2]), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-dfInt001', parameters('Sysguid')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "datafactory001StorageEnrichedCuratedRoleAssignment",
              "subscriptionId": "[variables('storageAccountEnrichedCuratedSubscriptionId')]",
              "resourceGroup": "[variables('storageAccountEnrichedCuratedResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "datafactoryId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-dfInt001', parameters('Sysguid'))), '2022-09-01').outputs.datafactoryId.value]"
                  },
                  "storageAccountFileSystemId": {
                    "value": "[parameters('storageAccountEnrichedCuratedFileSystemId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "16071343366840566594"
                    }
                  },
                  "parameters": {
                    "storageAccountFileSystemId": {
                      "type": "string"
                    },
                    "datafactoryId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "storageAccountFileSystemName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), last(split(parameters('storageAccountFileSystemId'), '/')), 'incorrectSegmentLength')]",
                    "storageAccountName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), split(parameters('storageAccountFileSystemId'), '/')[8], 'incorrectSegmentLength')]",
                    "datafactorySubscriptionId": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[2], subscription().subscriptionId)]",
                    "datafactoryResourceGroupName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[4], resourceGroup().name)]",
                    "datafactoryName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), last(split(parameters('datafactoryId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2])]",
                      "name": "[guid(uniqueString(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2]), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-dfInt001', parameters('Sysguid')))]"
              ]
            }
          ],
          "outputs": {
            "datafactoryIntegration001Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-dfInt001', parameters('Sysguid'))), '2022-09-01').outputs.datafactoryId.value]"
            },
            "integrationKeyVaultName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-keyVault001', parameters('Sysguid'))), '2022-09-01').outputs.keyVaultName.value]"
            },
            "integrationAcrName": {
              "type": "string",
              "value": "[if(parameters('IsForContainerizedWorkoad'), variables('acr001Name'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-dataservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-dataServices', variables('Sysguid')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-shared-integration', variables('name')))]"
      ]
    }
  ],
  "outputs": {
    "vnetId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.vnetId.value]"
    },
    "nsgId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.nsgId.value]"
    },
    "routeTableId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-appservices', variables('name'))), 'Microsoft.Resources/deployments', format('{0}-networkServices', variables('Sysguid'))), '2022-09-01').outputs.routeTableId.value]"
    }
  }
}